[{"D:\\React\\Accounting\\frontend\\src\\reportWebVitals.js":"1","D:\\React\\Accounting\\frontend\\src\\App.js":"2","D:\\React\\Accounting\\frontend\\src\\index.js":"3","D:\\React\\Accounting\\frontend\\src\\components\\Header.js":"4","D:\\React\\Accounting\\frontend\\src\\components\\Footer.js":"5","D:\\React\\Accounting\\frontend\\src\\screens\\HomeScreen.js":"6","D:\\React\\Accounting\\frontend\\src\\invoices.js":"7","D:\\React\\Accounting\\frontend\\src\\invoices\\InvoiceItem.js":"8","D:\\React\\Accounting\\frontend\\src\\invoices\\SingleInvoice.js":"9","D:\\React\\Accounting\\frontend\\src\\shared\\UIElements\\EditModal.js":"10","D:\\React\\Accounting\\frontend\\src\\shared\\form\\Form.js":"11","D:\\React\\Accounting\\frontend\\src\\invoices\\NewInvoice.js":"12","D:\\React\\Accounting\\frontend\\src\\shared\\UIElements\\SuccessModal.js":"13","D:\\React\\Accounting\\frontend\\src\\shared\\form\\TextError.js":"14"},{"size":362,"mtime":1606116057459,"results":"15","hashOfConfig":"16"},{"size":907,"mtime":1609185848473,"results":"17","hashOfConfig":"16"},{"size":522,"mtime":1608820728199,"results":"18","hashOfConfig":"16"},{"size":1201,"mtime":1609173844113,"results":"19","hashOfConfig":"16"},{"size":427,"mtime":1608824761201,"results":"20","hashOfConfig":"16"},{"size":1126,"mtime":1609174001549,"results":"21","hashOfConfig":"16"},{"size":897,"mtime":1608846678377,"results":"22","hashOfConfig":"16"},{"size":335,"mtime":1608849816552,"results":"23","hashOfConfig":"16"},{"size":1907,"mtime":1609188701835,"results":"24","hashOfConfig":"16"},{"size":773,"mtime":1608901328577,"results":"25","hashOfConfig":"16"},{"size":505,"mtime":1608902517498,"results":"26","hashOfConfig":"16"},{"size":9210,"mtime":1609256346980,"results":"27","hashOfConfig":"16"},{"size":679,"mtime":1609158754187,"results":"28","hashOfConfig":"16"},{"size":174,"mtime":1609181880473,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1thy00v",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\React\\Accounting\\frontend\\src\\reportWebVitals.js",[],"D:\\React\\Accounting\\frontend\\src\\App.js",[],"D:\\React\\Accounting\\frontend\\src\\index.js",[],["63","64"],"D:\\React\\Accounting\\frontend\\src\\components\\Header.js",["65"],"import React from 'react'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { Navbar, Nav, Container } from 'react-bootstrap'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header>\r\n      <Navbar bg='primary' variant='dark' expand='lg' collapseOnSelect>\r\n        <Container>\r\n          <LinkContainer to='/'>\r\n            <Nav.Link>\r\n              <Navbar.Brand>Все Счета</Navbar.Brand>\r\n            </Nav.Link>\r\n          </LinkContainer>\r\n          <Navbar.Toggle aria-controls='basic-navbar-nav' />\r\n          <Navbar.Collapse id='basic-navbar-nav'>\r\n            <Nav className='ml-auto'>\r\n              <LinkContainer to='/new-invoice'>\r\n                <Nav.Link>\r\n                  <i className='fas fa-plus-circle'></i> Новый счет\r\n                </Nav.Link>\r\n              </LinkContainer>\r\n\r\n              <LinkContainer to='/login'>\r\n                <Nav.Link>\r\n                  <i className='fas fa-user'></i>Sign In\r\n                </Nav.Link>\r\n              </LinkContainer>\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","D:\\React\\Accounting\\frontend\\src\\components\\Footer.js",[],"D:\\React\\Accounting\\frontend\\src\\screens\\HomeScreen.js",[],"D:\\React\\Accounting\\frontend\\src\\invoices.js",[],["66","67"],"D:\\React\\Accounting\\frontend\\src\\invoices\\InvoiceItem.js",[],["68","69"],"D:\\React\\Accounting\\frontend\\src\\invoices\\SingleInvoice.js",["70","71","72"],"D:\\React\\Accounting\\frontend\\src\\shared\\UIElements\\EditModal.js",[],"D:\\React\\Accounting\\frontend\\src\\shared\\form\\Form.js",[],"D:\\React\\Accounting\\frontend\\src\\invoices\\NewInvoice.js",["73"],"import React, { useState } from 'react'\r\nimport * as yup from 'yup'\r\nimport { Formik, ErrorMessage, FieldArray } from 'formik'\r\nimport { Form, Col, Button } from 'react-bootstrap'\r\nimport SuccessModal from '../shared/UIElements/SuccessModal'\r\nimport TextError from '../shared/form/TextError'\r\n\r\n// const PASSWORD_PATTERN = /^(?=.*?[A-Za-z])(?=.*?[0-9]).{8,32}$/\r\nconst reqdFieldMsg = 'Обязательное поле'\r\n// const invalidPwdMsg =\r\n//   'Password must contain atleast eight characters, at least one letter and one number.'\r\nconst schema = yup.object({\r\n  customer: yup.string().required(reqdFieldMsg),\r\n  vessel: yup.string().required(reqdFieldMsg),\r\n  voyage: yup.string().required(reqdFieldMsg),\r\n  bl: yup.string().required(reqdFieldMsg),\r\n  container: yup.string().required(reqdFieldMsg),\r\n})\r\n\r\nconst customers = ['TSRY', 'Фортуна', 'ИП Скакун']\r\n\r\nconst NewInvoice = () => {\r\n  const [validData, setValidData] = useState({})\r\n  const [showModal, setShowModal] = useState(false)\r\n\r\n  const onSubmit = (values) => {\r\n    setValidData(values)\r\n    setShowModal(true)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Formik\r\n        validationSchema={schema}\r\n        onSubmit={onSubmit}\r\n        validateOnChange={false}\r\n        initialValues={{\r\n          customer: '',\r\n          vessel: '',\r\n          voyage: '',\r\n          bl: '',\r\n          container: '',\r\n          lines: [\r\n            {\r\n              jobDescription: '',\r\n              quantity: '',\r\n              cost: '',\r\n            },\r\n          ],\r\n          linesNumber: [''],\r\n        }}\r\n      >\r\n        {({\r\n          handleSubmit,\r\n          handleChange,\r\n          handleBlur,\r\n          getFieldProps,\r\n          values,\r\n          touched,\r\n          errors,\r\n        }) => {\r\n          const addLinesHandler = () => {}\r\n          console.log(values.lines)\r\n\r\n          return (\r\n            <Form noValidate onSubmit={handleSubmit}>\r\n              <Form.Row>\r\n                <Form.Group as={Col} md='8'>\r\n                  <Form.Label>Клиент - выбор из списка</Form.Label>\r\n                  <Form.Control\r\n                    as='select'\r\n                    type='text'\r\n                    name='customer'\r\n                    {...getFieldProps('customer')}\r\n                    isInvalid={errors.customer && touched.customer}\r\n                  >\r\n                    <option></option>\r\n                    {customers.map((customer) => (\r\n                      <option key={customer}>{customer}</option>\r\n                    ))}\r\n                  </Form.Control>\r\n                  <ErrorMessage name='customer' component={TextError} />\r\n                </Form.Group>\r\n                <Form.Group>\r\n                  <Button className='btn-success' style={{ marginTop: '31px' }}>\r\n                    или - Новый клиент\r\n                  </Button>\r\n                </Form.Group>\r\n              </Form.Row>\r\n\r\n              <Form.Row>\r\n                <Form.Group as={Col} md='8'>\r\n                  <Form.Label>Судно</Form.Label>\r\n                  <Form.Control\r\n                    type='text'\r\n                    name='vessel'\r\n                    // placeholder='Название судна'\r\n                    {...getFieldProps('vessel')}\r\n                    isInvalid={errors.vessel && touched.vessel}\r\n                  />\r\n                  <ErrorMessage name='vessel' component={TextError} />\r\n                </Form.Group>\r\n                <Form.Group as={Col} md='4'>\r\n                  <Form.Label>Номер рейса</Form.Label>\r\n                  <Form.Control\r\n                    type='text'\r\n                    name='voyage'\r\n                    // placeholder='Номер рейса'\r\n                    {...getFieldProps('voyage')}\r\n                    isInvalid={errors.voyage && touched.voyage}\r\n                  />\r\n                  <ErrorMessage name='voyage' component={TextError} />\r\n                </Form.Group>\r\n              </Form.Row>\r\n\r\n              <Form.Row>\r\n                <Form.Group as={Col} md='4'>\r\n                  <Form.Label>Коносамент</Form.Label>\r\n                  <Form.Control\r\n                    type='text'\r\n                    name='bl'\r\n                    // placeholder='Номер коносамента'\r\n                    {...getFieldProps('bl')}\r\n                    isInvalid={errors.bl && touched.bl}\r\n                  />\r\n                  <ErrorMessage name='bl' component={TextError} />\r\n                </Form.Group>\r\n                <Form.Group as={Col} md='8'>\r\n                  <Form.Label>Номера контейнеров</Form.Label>\r\n                  <Form.Control\r\n                    type='text'\r\n                    name='container'\r\n                    // placeholder='Номера контейнеров'\r\n                    {...getFieldProps('container')}\r\n                    isInvalid={errors.container && touched.container}\r\n                  />\r\n                  <ErrorMessage name='container' component={TextError} />\r\n                </Form.Group>\r\n              </Form.Row>\r\n\r\n              <Form.Label>Позиции счета</Form.Label>\r\n              <FieldArray name='lines'>\r\n                {(fieldArrayProps) => {\r\n                  console.log(fieldArrayProps)\r\n                  const { push, remove, form } = fieldArrayProps\r\n                  const { values } = form\r\n                  const { lines } = values\r\n                  return (\r\n                    <div>\r\n                      {lines.map((line, index) => (\r\n                        <>\r\n                          <Form.Control\r\n                            type='text'\r\n                            name={`lines.${index}.jobDescription`}\r\n                            {...getFieldProps(`line.${index}.jobDescription`)}\r\n                          />\r\n                          <Form.Control\r\n                            type='text'\r\n                            name={`lines.${index}.quantity`}\r\n                            {...getFieldProps(`line.${index}.quantity`)}\r\n                          />\r\n                          <Form.Control\r\n                            type='text'\r\n                            name={`lines.${index}.cost`}\r\n                            {...getFieldProps(`line.${index}.cost`)}\r\n                          />\r\n                          <Button\r\n                            onClick={() => {\r\n                              remove(index)\r\n                            }}\r\n                          >\r\n                            -\r\n                          </Button>\r\n                          <Button\r\n                            onClick={() => {\r\n                              push('')\r\n                            }}\r\n                          >\r\n                            +\r\n                          </Button>\r\n                        </>\r\n                      ))}\r\n                    </div>\r\n                  )\r\n                }}\r\n              </FieldArray>\r\n\r\n              {/* <Form.Row>\r\n                <Form.Group as={Col} xs={8}>\r\n                  <Form.Label>Описание услуги</Form.Label>\r\n                  <Form.Control\r\n                    as='textarea'\r\n                    type='text'\r\n                    name='lines.jobDescription'\r\n                    // placeholder='Описание услуги'\r\n                    {...getFieldProps('jobDescription')}\r\n                    isInvalid={errors.jobDescription && touched.jobDescription}\r\n                  />\r\n                  <ErrorMessage name='jobDescription' component={TextError} />\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Col}>\r\n                  <Form.Label>Количество</Form.Label>\r\n                  <Form.Control\r\n                    type='text'\r\n                    name='lines.quantity'\r\n                    {...getFieldProps('quantity')}\r\n                    isInvalid={errors.quantity && touched.quantity}\r\n                  />\r\n                  <ErrorMessage name='quantity' component={TextError} />\r\n                </Form.Group>\r\n                <Form.Group as={Col}>\r\n                  <Form.Label>Цена</Form.Label>\r\n                  <Form.Control\r\n                    type='text'\r\n                    name='lines.cost'\r\n                    {...getFieldProps('cost')}\r\n                    isInvalid={errors.cost && touched.cost}\r\n                  />\r\n                  <ErrorMessage name='cost' component={TextError} />\r\n                </Form.Group>\r\n                <Form.Group as={Col}>\r\n                  <Button\r\n                    className='btn-small btn-success'\r\n                    style={{ marginTop: '31px' }}\r\n                    onClick={addLinesHandler}\r\n                  >\r\n                    +\r\n                  </Button>\r\n                </Form.Group>\r\n              </Form.Row> */}\r\n\r\n              <Button type='submit'>Submit</Button>\r\n            </Form>\r\n          )\r\n        }}\r\n      </Formik>\r\n      <SuccessModal\r\n        show={showModal}\r\n        onHide={() => setShowModal(false)}\r\n        data={validData}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default NewInvoice\r\n","D:\\React\\Accounting\\frontend\\src\\shared\\UIElements\\SuccessModal.js",[],"D:\\React\\Accounting\\frontend\\src\\shared\\form\\TextError.js",[],{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","severity":1,"message":"79","line":4,"column":10,"nodeType":"80","messageId":"81","endLine":4,"endColumn":17},{"ruleId":"74","replacedBy":"82"},{"ruleId":"76","replacedBy":"83"},{"ruleId":"74","replacedBy":"84"},{"ruleId":"76","replacedBy":"85"},{"ruleId":"78","severity":1,"message":"86","line":1,"column":27,"nodeType":"80","messageId":"81","endLine":1,"endColumn":38},{"ruleId":"78","severity":1,"message":"87","line":4,"column":17,"nodeType":"80","messageId":"81","endLine":4,"endColumn":27},{"ruleId":"78","severity":1,"message":"88","line":4,"column":29,"nodeType":"80","messageId":"81","endLine":4,"endColumn":40},{"ruleId":"78","severity":1,"message":"89","line":62,"column":17,"nodeType":"80","messageId":"81","endLine":62,"endColumn":32},"no-native-reassign",["90"],"no-negated-in-lhs",["91"],"no-unused-vars","'NavLink' is defined but never used.","Identifier","unusedVar",["90"],["91"],["90"],["91"],"'useCallback' is defined but never used.","'InputGroup' is defined but never used.","'FormControl' is defined but never used.","'addLinesHandler' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]